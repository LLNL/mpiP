dnl Process this file with autoconf to produce a configure script.

dnl These two lines disable the cache.
define([AC_CACHE_LOAD], )
define([AC_CACHE_SAVE], )

AC_INIT(mpiP, 2.7, mpip-help@llnl.gov)
AC_PREREQ(2.13)
AC_CONFIG_HEADER(mpiPconfig.h)
AC_CONFIG_AUX_DIR(bin)

AC_CANONICAL_SYSTEM

CPPFLAGS=
LDFLAGS=
PARENT_FRAME_COUNT=1

AC_ARG_WITH(cc,
[  --with-cc               Gives the name of the C compiler to use.],
CC=$withval
)

AC_ARG_WITH(cxx,
[  --with-cxx              Gives the name of the C++ compiler to use.],
CXX=$withval
)

AC_ARG_WITH(f77,
[  --with-f77              Gives the name of the FORTRAN 77 compiler to use.],
F77=$withval
)

AC_ARG_WITH(include,
[  --with-include          Specifies include directories (-Idir1 -Idir2).],
CPPFLAGS=$withval
echo Using extra include directories: $withval
)

AC_ARG_WITH(ldflags,
[  --with-ldflags          Specifies ld flags (-L/usr/local/lib).],
LDFLAGS=$withval
echo Using ld flags: $withval
)
AC_SUBST(LDFLAGS)

AC_ARG_WITH(libs,
[  --with-libs             Specifies libraries (-llib1 -llib2).],
LIBS=$withval
echo Using extra libraries: $withval
)

AC_ARG_WITH(binutils-dir,
[  --with-binutils-dir     Base directory of binutils installation.],
BINUTILS_DIR=$withval
LDFLAGS="${LDFLAGS} -L${BINUTILS_DIR}/lib"
CPPFLAGS="${CPPFLAGS} -I${BINUTILS_DIR}/include"
echo Using binutils-dir: $withval
,
BINUTILS_DIR=unknown
)
AC_SUBST(BINUTILS_DIR)

AC_ARG_WITH(bin-type-flag,
[  --with-bin-type-flag    Binary format for AIX ar operations.],
BIN_TYPE_FLAG=$withval
echo Using bin-type-flag: $withval
,
BIN_TYPE_FLAG=
)
AC_SUBST(BIN_TYPE_FLAG)

AC_ARG_ENABLE(demangling,
[  --enable-demangling     Specify GNU, IBM, or Compaq demangling support.],
DO_DEMANGLE=$enableval
echo $DO_DEMANGLE demangling enabled
,
DO_DEMANGLE=false
)
AC_SUBST(DO_DEMANGLE)

AC_ARG_ENABLE(stackdepth,
[  --enable-stackdepth     Specify maximum stacktrace depth (default is 8).],
STACKDEPTH=$enableval
echo Maximum stacktrace depth is $STACKDEPTH
,
STACKDEPTH=8
)
AC_SUBST(STACKDEPTH)

AC_ARG_ENABLE(dwarf,
[  --enable-dwarf          Use DWARF library for source lookup.],
if test x"$enableval" = xyes ; then
AC_DEFINE(USE_LIBDWARF)
echo "Using DWARF library for symbol lookup; forcing --disable-bfd"
enable_bfd=no
fi ;
USE_LIBDWARF=yes
,
USE_LIBDWARF=no
)
AC_SUBST(USE_LIBDWARF)

AC_ARG_ENABLE(bfd,
[  --disable-bfd           Do not use GNU binutils libbfd for source lookup.],
AC_DEFINE(DISABLE_BFD)
echo Use of libbfd has been disabled
,
)

AC_ARG_ENABLE(libunwind,
[  --disable-libunwind     Do not use libunwind to generate stack traces.],
DISABLE_LIBUNWIND=yes
echo Use of libunwind has been disabled
PARENT_FRAME_COUNT=1
,
if [ `uname -s` == "OSF1" ] ; then
  PARENT_FRAME_COUNT=2
fi
if [ `uname -s | cut -c1-6` == "UNICOS" ] ; then
  PARENT_FRAME_COUNT=3
fi
)

AC_ARG_ENABLE(mpi-io,
[  --disable-mpi-io        Disable MPI-I/O reporting.],
DISABLE_MPI_IO=yes
echo Profiling of MPI I/O has been disabled.
,
DISABLE_MPI_IO=no
)
AC_SUBST(DISABLE_MPI_IO)

AC_ARG_ENABLE(getarg,
[  --enable-getarg         Use getarg to get fortran command line args.],
AC_DEFINE(USE_GETARG)
echo Use of getarg has been enabled
USE_GETARG=true
,
USE_GETARG=false
)
AC_SUBST(USE_GETARG)

AC_ARG_WITH(gettimeofday,
[  --with-gettimeofday     Use gettimeofday for timing.],
AC_DEFINE(USE_GETTIMEOFDAY)
echo Using gettimeofday for timing.
,
)

AC_ARG_ENABLE(check-time,
[  --enable-check-time     Enable AIX check for negative time values.],
AC_DEFINE(MPIP_CHECK_TIME)
echo AIX negative time value checking has been enabled
,
)

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_CHECK_PROGS(CC, mpcc_r xlc_r mpicc cmpicc gcc cc icc, mpicc)
AC_CHECK_PROGS(CXX, mpCC_r xlC_r mpiCC cmpic++ c++ g++ CC cxx icc, mpiCC)
AC_CHECK_PROGS(F77, mpxlf_r xlf_r mpif77 cmpifc f77 g77 pgf77 fort ifc, mpif77)
AC_CHECK_PROGS(LAUNCH, poe srun prun mpirun, mpirun)

AC_CHECK_HEADER(demangle.h, AC_DEFINE(HAVE_DEMANGLE_H))
AC_CHECK_LIB(intl,dcgettext__)
AC_CHECK_LIB(iberty,objalloc_create)
AC_CHECK_LIB(m,sqrt)
AC_CHECK_LIB(mpio,MPI_File_open)

if test -z "$DISABLE_BFD" ; then
AC_CHECK_HEADER(bfd.h,AC_CHECK_LIB(bfd,bfd_openr,,,))
AC_CHECK_TYPE(bfd_boolean, ,AC_DEFINE(BFD_TRUE_FALSE), #include "bfd.h" 
)
fi
if test -z "$DISABLE_LIBUNWIND" ; then
AC_CHECK_HEADER(libunwind.h, AC_DEFINE(HAVE_LIBUNWIND) LIBS="$LIBS -lunwind" PARENT_FRAME_COUNT=2)
fi
AC_SUBST(PARENT_FRAME_COUNT)
if test "$DISABLE_MPI_IO" = no ; then
AC_CHECK_FUNC(MPI_File_open, AC_DEFINE(HAVE_MPI_IO) HAVE_MPI_IO=mpi.io.protos.txt, 
AC_MSG_RESULT(MPI I/O symbols not found.  MPI I/O reporting deactivated.)
HAVE_MPI_IO=/dev/null
)
else
  HAVE_MPI_IO=/dev/null
fi

dnl ========== Find out how FORTRAN symbol names appear in C ==========

AC_MSG_CHECKING(fortran symbols)
if test -n "$F77" -a "$F77" != no ; then
  /bin/rm -f ffunc.f flink.c
  echo "      subroutine f_fun()" > ffunc.f
  echo "      return" >> ffunc.f
  echo "      end" >> ffunc.f
  $F77 $FFLAGS -c ffunc.f 1>/dev/null 2>/dev/null
  echo "main(){ FF(); return 0; }" > flink.c
  if $CC -o flink -DFF=f_fun flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(same as C)
    F77_SYMBOLS=symbol
  elif $CC -o flink -DFF=f_fun_ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(lowercase with underscore)
    F77_SYMBOLS=symbol_
  elif $CC -o flink -DFF=f_fun__ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(lowercase with 2 underscores)
    F77_SYMBOLS=symbol__
  elif $CC -o flink -DFF=F_FUN flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(uppercase)
    F77_SYMBOLS=SYMBOL
  elif $CC -o flink -DFF=F_FUN_ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(uppercase with underscore)
    F77_SYMBOLS=SYMBOL_
  elif $CC -o flink -DFF=F_FUN_ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(uppercase with 2 underscores)
    F77_SYMBOLS=SYMBOL__
  else
    AC_MSG_RESULT(giving up)
    AC_MSG_ERROR(could not determine F77 symbol names)
  fi
  /bin/rm -f ffunc.f ffunc.o flink flink.c flink.o ffunc
else
  F77_SYMBOLS=symbol_
  AC_MSG_RESULT(guessing lowercase with underscore)
fi
AC_SUBST(F77_SYMBOLS)
AC_DEFINE_UNQUOTED(F77_SYMBOLS,$F77_SYMBOLS)


dnl ========== Identify F77 ==========
AC_MSG_CHECKING(fortran compiler)
if $F77 -V 2>&1 | grep -e 'Portland Group' 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=PGI
  MPIPFLIB=mpiPpgf
  FORTRAN_FLAG=-DPGI
  FORTRAN_TARGET=libmpiPpgf.a
elif test "$G77" = yes ; then
  F77_VENDOR=GNU
  FORTRAN_FLAG=-DGNU_Fortran
  FORTRAN_TARGET=libmpiPg77.a
  MPIPFLIB=mpiPg77
elif $F77 -v 2>&1 | grep -e gcc 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=GNU
  FORTRAN_FLAG=-DGNU_Fortran
  FORTRAN_TARGET=libmpiPg77.a
  MPIPFLIB=mpiPg77
elif $F77 -V 2>&1 | grep -e Intel 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=Intel
  FORTRAN_FLAG=-DIntel_Fortran
  FORTRAN_TARGET=libmpiPifc.a
  MPIPFLIB=mpiPifc
elif $F77 -version 2>&1 | grep -e Compaq 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=Compaq
  MPIPFLIB=mpiP
  FORTRAN_FLAG=
  FORTRAN_TARGET=
else
  F77_VENDOR=Unknown
  MPIPFLIB=mpiP
  FORTRAN_FLAG=
  FORTRAN_TARGET=
fi

AC_MSG_RESULT($F77_VENDOR)
AC_SUBST(F77_VENDOR,$F77_VENDOR)
AC_SUBST(MPIPFLIB,$MPIPFLIB)
AC_SUBST(FORTRAN_FLAG,$FORTRAN_FLAG)
AC_SUBST(FORTRAN_TARGET,$FORTRAN_TARGET)
AC_SUBST_FILE(HAVE_MPI_IO)

AC_OUTPUT([Defs.mak Makefile testing/Makefile Check.mak mpiPi.h mpi.protos.txt])
