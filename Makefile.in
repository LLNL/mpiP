# Makefile for MPIP	-*-Makefile-*-
# Copyright (C) 2001 Jeffrey Vetter vetter3@llnl.gov
# $Header$

srcdir=@srcdir@
prefix=@prefix@
libdir=${prefix}/lib
includedir=@includedir@
docdir=${prefix}/doc
slibdir=${prefix}/slib
bindir=${prefix}/bin
VPATH = ${srcdir}

include Defs.mak

.PHONY: default all install clean shared remake_util remake_lookup proto merged-install cleanobjs test

default: ${C_TARGET} ${FORTRAN_TARGET} ${DEMANGLE_TARGET} API

all: ${C_TARGET} ${FORTRAN_TARGET} ${DEMANGLE_TARGET} API test
	@echo All done.

SRCS =	diag_msgs.c \
	mpiP-hash.c \
	glob.c \
	wrappers.c \
	wrappers_special.c \
	mpiPi.c \
	util.c \
	lookup.c \
	report.c \
	pcontrol.c \
	mpiP-API.c

API_SRCS =	diag_msgs_api.c \
	mpiP-hash.c \
	glob.c \
	mpiPi.c \
	util.c \
	lookup.c \
	mpiP-API.c

USE_GETARG   = @USE_GETARG@
USE_LIBDWARF = @USE_LIBDWARF@

ifeq ($(USE_LIBDWARF),yes)
    SRCS += pc_lookup_dwarf.c
    API_SRCS += pc_lookup_dwarf.c
else
    SRCS += pc_lookup.c
    API_SRCS += pc_lookup.c
endif

OBJS  = $(SRCS:.c=.o)
FOBJS = $(OBJS)

API_OBJS = $(API_SRCS:.c=.o)

ifeq ($(USE_GETARG),true)
ifeq ($(F77_VENDOR),Cray)

    FOBJS += get_fortran_arg_pxf.o

clean::
	rm -f get_fortran_arg_pfx.o

else
    FOBJS   += get_fortran_arg.o

clean::
	rm -f get_fortran_arg.o

endif
endif


${C_TARGET}: ${OBJS} 
	${AR} ruv $@ ${OBJS}
	${RANLIB} $@

${FORTRAN_TARGET}: remake_util ${FOBJS} 
	${AR} ruv $@ ${FOBJS}
	${RANLIB} $@
	rm -f util.o

${DEMANGLE_TARGET}: remake_lookup ${OBJS} 
	${AR} ruv $@ ${OBJS}
	${RANLIB} $@
	rm -f pc_lookup.o



ifeq ($(OS), Linux)
SHARED_C_TARGET = $(C_TARGET:.a=.so)
SHARED_FORTRAN_TARGET = $(FORTRAN_TARGET:.a=.so)
SHARED_DEMANGLE_TARGET = $(DEMANGLE_TARGET:.a=.so)

shared: ${SHARED_C_TARGET}
install::
	if [ -x ${SHARED_C_TARGET} ] ; then \
	  mkdir -p ${slibdir} ; \
	  ${INSTALL} ${SHARED_C_TARGET} ${slibdir} ; \
	fi
clean::
	rm -f ${SHARED_C_TARGET}

${SHARED_C_TARGET}: CFLAGS += -fpic
${SHARED_C_TARGET}: cleanobjs ${OBJS}
	${CC} -shared -o $@ ${OBJS}

endif

ifeq ($(OS), AIX)
SHARED_C_TARGET = $(C_TARGET:.a=.so)
SHARED_FORTRAN_TARGET = $(FORTRAN_TARGET:.a=.so)
SHARED_DEMANGLE_TARGET = $(DEMANGLE_TARGET:.a=.so)

shared: ${SHARED_C_TARGET} ${SHARED_FORTRAN_TARGET} ${SHARED_DEMANGLE_TARGET}
install::
	if [ -x ${SHARED_C_TARGET} ] ; then \
	  mkdir -p ${slibdir} ; \
	  ${INSTALL} ${SHARED_C_TARGET} ${slibdir} ; \
	fi

clean::
	rm -f ${SHARED_C_TARGET} ${SHARED_FORTRAN_TARGET} ${SHARED_DEMANGLE_TARGET}

${SHARED_C_TARGET} ${SHARED_FORTRAN_TARGET} ${SHARED_DEMANGLE_TARGET}: ${C_TARGET}
	mpxlc -G -o $@ ${OBJS}
endif


api API: libmpiP-API.a

libmpiP-API.a: ${API_OBJS} 
	${MAKE} remake_lookup
	${AR} ruv $@ ${API_OBJS}
	${RANLIB} $@
	${MAKE} remove_lookup

clean :: 
	rm -f ${API_OBJS}

remake_util: CPPFLAGS += ${FORTRAN_FLAG}
remake_util:
	rm -f util.o
	$(MAKE) util.o CPPFLAGS='${CPPFLAGS}'

remake_lookup: CPPFLAGS += ${DEMANGLE_FLAG}
remake_lookup: remove_lookup
	$(MAKE) pc_lookup.o CPPFLAGS='${CPPFLAGS}'
	$(MAKE) util.o 

remove_lookup:
	rm -f pc_lookup.o

add_binutils_objs:
	-mkdir mpip_temp_obj_dir
	cd mpip_temp_obj_dir; \
	ar -x ${BIN_TYPE_FLAG} ${BINUTILS_DIR}/lib/libbfd.a ; \
	ar -x ${BIN_TYPE_FLAG} ${BINUTILS_DIR}/lib/libiberty.a ; \
	ar -x ${BIN_TYPE_FLAG} ${BINUTILS_DIR}/lib/libintl.a ; \
	ar -q ${BIN_TYPE_FLAG} ../${C_TARGET} *.o ; \
	if [ "x${FORTRAN_TARGET}" != "x" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${FORTRAN_TARGET} *.o ; fi ; \
	if [ "${DEMANGLE_TARGET}" != "x" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${DEMANGLE_TARGET} *.o ; fi ; \
	if [ "x${API_TARGET}" != "x" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${API_TARGET} *.o ; fi ; 
	rm -rf mpip_temp_obj_dir

add_libunwind_objs:
	-mkdir mpip_temp_obj_dir
	cd mpip_temp_obj_dir ; \
	ar -x ${BIN_TYPE_FLAG} /usr/lib/libunwind.a ; \
	ar -q ${BIN_TYPE_FLAG} ../${C_TARGET} *.o ; \
	if [ "${FORTRAN_TARGET}" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${FORTRAN_TARGET} *.o ; fi ; \
	if [ "${DEMANGLE_TARGET}" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${DEMANGLE_TARGET} *.o ; fi
	rm -rf mpip_temp_obj_dir

TAGS: ${SRCS}
	etags $^

test:
	$(MAKE) -C testing

clean::
	rm -f TAGS tags
	$(MAKE) -C testing clean

include $(srcdir)/Rules.mak

ENABLE_FORTRAN_XLATE = @ENABLE_FORTRAN_XLATE@
ifeq ($(ENABLE_FORTRAN_XLATE), yes)
  MAKE_WRAPPERS_ARGS += --xlate
endif

wrappers.c symbols.h lookup.c mpiPi_def.h: mpi.protos.txt make-wrappers.py
	$(PYTHON) $(srcdir)/make-wrappers.py $(MAKE_WRAPPERS_ARGS) --f77symbol $(F77_SYMBOLS) $^

${OBJS}: mpiPconfig.h mpiPi.h mpiPi_def.h mpiPi_proto.h symbols.h _timers.h

install:: ${C_TARGET} ${DEMANGLE_TARGET} ${FORTRAN_TARGET} API
	mkdir -p ${libdir} ${includedir} ${docdir} ${bindir}
	${INSTALL} ${C_TARGET} ${libdir}/${C_TARGET}
	if test "x${DEMANGLE_TARGET}" != "x" ; then ${INSTALL} ${DEMANGLE_TARGET} ${libdir}/${DEMANGLE_TARGET} ; fi
	if test "x${FORTRAN_TARGET}" != "x" ; then ${INSTALL} ${FORTRAN_TARGET} ${libdir}/${FORTRAN_TARGET} ; fi
	if test "x${API_TARGET}" != "x" ; then ${INSTALL} ${API_TARGET} ${libdir}/${API_TARGET} ; fi
	${INSTALL} mpiP-API.h _timers.h timers/*h ${includedir}
	${INSTALL} doc/*txt doc/*html doc/README ${docdir}
	${INSTALL} bin/*mpip* ${bindir}

merged-install: add_binutils_objs add_libunwind_objs install

proto:
	cextract -DCEXTRACT $(CPPFLAGS) *.c | sed -e '/find_address/d' -e '/Dwarf/d' > mpiPi_proto.h

clean::
	rm -f wrappers.c symbols.h lookup.c mpiPi_def.h

clean::
	rm -f ${FORTRAN_TARGET} ${DEMANGLE_TARGET} ${API_TARGET}

cleanobjs:
	rm -f ${FOBJS} ${API_OBJS}

MPIINC	= -I/usr/lpp/ppe.poe/include
lint: ${SRCS}
	gcc -Wall -Dlint ${CFLAGS} ${CPPFLAGS} ${MPIINC} -c ${SRCS}

distclean: clean
	rm -f Makefile Defs.mak Check.mak config.log config.status lookup.c mpiPconfig.h mpiPi_def.h symbols.h wrappers.c testing/Makefile libmpiP* mpi.protos.txt mpiPi.h

include Check.mak

##### EOF
