# Makefile for MPIP	-*-Makefile-*-
# Copyright (C) 2001 Jeffrey Vetter vetter3@llnl.gov
# $Header$
# @configure_input@

srcdir=@srcdir@
prefix=@prefix@
libdir=${prefix}/lib
includedir=@includedir@
docdir=${prefix}/doc
slibdir=${prefix}/slib
bindir=${prefix}/bin
VPATH = ${srcdir}

include Defs.mak

.PHONY: default all install clean api API shared proto merged-install \
  cleanobjs test add_binutils_objs add_libunwind_objs TAGS cleanobjs distclean \
  lint indent proto

default: @DEFAULT_TARGS@

all: ${C_TARGET} ${FORTRAN_TARGET} ${DEMANGLE_TARGET} API test
	@echo All done.

PC_LOOKUP_FILE=@PC_LOOKUP_FILE@
PC_LOOKUP_OBJ = $(PC_LOOKUP_FILE:.c=.o)

SRCS =	diag_msgs.c \
	mpiP-hash.c \
	glob.c \
	wrappers.c \
	wrappers_special.c \
	mpiPi.c \
	util.c \
	lookup.c \
	report.c \
	pcontrol.c \
	mpiP-API.c \
	${PC_LOOKUP_FILE}

API_SRCS =	diag_msgs_api.c \
	mpiP-hash.c \
	glob.c \
	mpiPi.c \
	util.c \
	mpiP-API.c \
	${PC_LOOKUP_FILE}

OBJS  = $(SRCS:.c=.o)
FOBJS = $(OBJS)

API_OBJS = $(API_SRCS:.c=.o)

FORTRAN_GETARG_OBJ_FILE=@FORTRAN_GETARG_OBJ_FILE@
FOBJS += $(FORTRAN_GETARG_OBJ_FILE)

clean::
	rm -f $(FORTRAN_GETARG_OBJ_FILE)


#  If using BFD and need a separate demangling library,
#  defensively rebuild pc_lookup.o for each target
ifeq ($(DISABLE_BFD),no)
ifneq ($(DEMANGLE_TARGET),)

${C_TARGET} ${FORTRAN_TARGET} :: 
	rm -f $(PC_LOOKUP_OBJ)
	$(MAKE) $(PC_LOOKUP_OBJ)

${DEMANGLE_TARGET} :: 
	rm -f $(PC_LOOKUP_OBJ)
	$(MAKE) CPPFLAGS="${CPPFLAGS} ${DEMANGLE_FLAG}" $(PC_LOOKUP_OBJ)

ifeq ($(ENABLE_API_ONLY),no)
${API_TARGET}:: 
	rm -f $(PC_LOOKUP_OBJ)
	$(MAKE) $(PC_LOOKUP_OBJ)
endif
endif
endif

#  If using Fortran iargc/getarg intrinsics to get command-line arguments,
#  defensively rebuild util.o for each target
ifeq ($(USE_GETARG),true)
${C_TARGET} ${DEMANGLE_TARGET} :: 
	rm -f util.o
	$(MAKE) util.o

${FORTRAN_TARGET} ::
	rm -f util.o
	$(MAKE) util.o CPPFLAGS="${CPPFLAGS} ${FORTRAN_FLAG}"

ifeq ($(ENABLE_API_ONLY),no)
${API_TARGET}:: 
	rm -f util.o
	$(MAKE) util.o
endif
endif


${C_TARGET}:: ${OBJS} 
	${AR} ruv $@ ${OBJS}
	${RANLIB} $@

${FORTRAN_TARGET}:: ${FOBJS} 
	${AR} ruv $@ ${FOBJS}
	${RANLIB} $@

${DEMANGLE_TARGET}:: ${OBJS} 
	${AR} ruv $@ ${OBJS}
	${RANLIB} $@
	rm -f pc_lookup.o

api API: ${API_TARGET}

${API_TARGET}:: ${API_OBJS} 
	${AR} ruv $@ ${API_OBJS}
	${RANLIB} $@


ifeq ($(OS), Linux)
SHARED_C_TARGET = $(C_TARGET:.a=.so)
SHARED_FORTRAN_TARGET = $(FORTRAN_TARGET:.a=.so)
SHARED_DEMANGLE_TARGET = $(DEMANGLE_TARGET:.a=.so)

shared: ${SHARED_C_TARGET}
install::
	if [ -x ${SHARED_C_TARGET} ] ; then \
	  mkdir -p ${slibdir} ; \
	  ${INSTALL} ${SHARED_C_TARGET} ${slibdir} ; \
	fi
clean::
	rm -f ${SHARED_C_TARGET}

${SHARED_C_TARGET}: CFLAGS += -fpic
${SHARED_C_TARGET}: cleanobjs ${OBJS}
	${CC} -shared -o $@ ${OBJS}

endif


clean :: 
	rm -f ${API_OBJS}

add_binutils_objs:
	-mkdir mpip_temp_obj_dir
	cd mpip_temp_obj_dir; \
	ar -x ${BIN_TYPE_FLAG} ${BINUTILS_DIR}/lib/libbfd.a ; \
	ar -x ${BIN_TYPE_FLAG} ${BINUTILS_DIR}/lib/libiberty.a ; \
	ar -x ${BIN_TYPE_FLAG} ${BINUTILS_DIR}/lib/libintl.a ; \
	if [ "x$(ENABLE_API_ONLY)" = "xno" ] ; then \
	  ar -q ${BIN_TYPE_FLAG} ../${C_TARGET} *.o ; \
	  if [ "x${FORTRAN_TARGET}" != "x" ]; then \
	    ar -q ${BIN_TYPE_FLAG} ../${FORTRAN_TARGET} *.o ; fi ; \
	  if [ "x${DEMANGLE_TARGET}" != "x" ]; then \
	    ar -q ${BIN_TYPE_FLAG} ../${DEMANGLE_TARGET} *.o ; fi ; \
	fi ; \
	if [ "x${API_TARGET}" != "x" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${API_TARGET} *.o ; fi ; 
	rm -rf mpip_temp_obj_dir

add_libunwind_objs:
	-mkdir mpip_temp_obj_dir
	cd mpip_temp_obj_dir ; \
	ar -x ${BIN_TYPE_FLAG} /usr/lib/libunwind.a ; \
	ar -q ${BIN_TYPE_FLAG} ../${C_TARGET} *.o ; \
	if [ "${FORTRAN_TARGET}" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${FORTRAN_TARGET} *.o ; fi ; \
	if [ "${DEMANGLE_TARGET}" ]; then \
	  ar -q ${BIN_TYPE_FLAG} ../${DEMANGLE_TARGET} *.o ; fi
	rm -rf mpip_temp_obj_dir

TAGS: ${SRCS}
	etags $^

test:
	$(MAKE) -C testing

clean::
	rm -f TAGS tags
	$(MAKE) -C testing clean

include $(srcdir)/Rules.mak

ENABLE_FORTRAN_XLATE = @ENABLE_FORTRAN_XLATE@
ifeq ($(ENABLE_FORTRAN_XLATE), yes)
  MAKE_WRAPPERS_ARGS += --xlate
endif

wrappers.c symbols.h lookup.c mpiPi_def.h: mpi.protos.txt make-wrappers.py
	$(PYTHON) $(srcdir)/make-wrappers.py $(MAKE_WRAPPERS_ARGS) --f77symbol $(F77_SYMBOLS) $^

ifeq ($(ENABLE_API_ONLY), no)
${OBJS}: mpiPconfig.h mpiPi.h mpiPi_def.h mpiPi_proto.h symbols.h _timers.h
else
${API_OBJS} : mpiPconfig.h mpiPi.h mpiPi_proto.h _timers.h
endif

install::
	mkdir -p ${libdir} ${includedir}/timers ${docdir} ${bindir}
	if [ ${prefix} != `pwd` -a ${prefix} != "." ] ; then \
	  ${INSTALL} doc/*txt doc/*html doc/README ${docdir} ; \
	  ${INSTALL} bin/*mpip* ${bindir} ; \
	fi

ifeq ($(ENABLE_API_ONLY), no)
install:: ${C_TARGET} ${DEMANGLE_TARGET} ${FORTRAN_TARGET} API
	${INSTALL} ${C_TARGET} ${libdir}/${C_TARGET}
	if test "x${DEMANGLE_TARGET}" != "x" ; then ${INSTALL} ${DEMANGLE_TARGET} ${libdir}/${DEMANGLE_TARGET} ; fi
	if test "x${FORTRAN_TARGET}" != "x" ; then ${INSTALL} ${FORTRAN_TARGET} ${libdir}/${FORTRAN_TARGET} ; fi
	if test "x${API_TARGET}" != "x" ; then ${INSTALL} ${API_TARGET} ${libdir}/${API_TARGET} ; fi
	${INSTALL} mpiP-API.h _timers.h ${includedir}
	${INSTALL} timers/*h ${includedir}/timers
else
install:: API
	if test "x${API_TARGET}" != "x" ; then ${INSTALL} ${API_TARGET} ${libdir}/${API_TARGET} ; fi
	${INSTALL} mpiP-API.h _timers.h ${includedir}
	${INSTALL} timers/*h ${includedir}/timers
endif

merged-install: add_binutils_objs add_libunwind_objs install

proto:
	cextract -DCEXTRACT $(CPPFLAGS) *.c | sed -e '/find_address/d' -e '/Dwarf/d' > mpiPi_proto.h

clean::
	rm -f wrappers.c symbols.h lookup.c mpiPi_def.h

clean::
	rm -f ${FORTRAN_TARGET} ${DEMANGLE_TARGET} ${API_TARGET}

cleanobjs:
	rm -f ${FOBJS} ${API_OBJS}

MPIINC	= -I/usr/lpp/ppe.poe/include
lint: ${SRCS}
	gcc -Wall -Dlint ${CFLAGS} ${CPPFLAGS} ${MPIINC} -c ${SRCS}

distclean: clean
	rm -f Makefile Defs.mak Check.mak config.log config.status lookup.c mpiPconfig.h mpiPi_def.h symbols.h wrappers.c testing/Makefile libmpiP* mpi.protos.txt mpiPi.h get_fortran_arg.f timers/aix_local.h

include Check.mak

indent:
	indent *.c *.h *.h.in testing/*.c timers/*.h timers/*.h.in

##### EOF
