/*
 *   This file was automatically generated by version 1.7 of cextract.
 *   Manual editing not recommended.
 *
 *   Created: Wed Jun 23 08:46:00 2004
 */
#ifndef __CEXTRACT__
#if __STDC__

extern int main ( int argc, char** argv );
extern void mpiPi_msg ( char *fmt, ... );
extern void mpiPi_abort ( char *fmt, ... );
extern void mpiPi_msg_debug ( char *fmt, ... );
extern void mpiPi_msg_warn ( char *fmt, ... );
extern h_t * h_open ( int size, h_HashFunct hf, h_Comparator hc );
extern void h_close ( h_t * ht );
extern int h_count ( h_t * ht );
extern int h_insert ( h_t * ht, void *ptr );
extern void * h_search ( h_t * ht, void *key, void **ptr );
extern void * h_delete ( h_t * ht, void *key, void **ptr );
extern int h_gather_data ( h_t * ht, int *ac, void ***ptr );
extern void mpiPi_init ( char *appName );
extern int callsite_pc_cache_comparator ( const void *p1, const void *p2 );
extern int callsite_pc_cache_hashkey ( const void *p1 );
extern int mpiPi_query_pc ( void *pc, char **filename, char **functname, int *lineno );
extern int callsite_src_id_cache_comparator ( const void *p1, const void *p2 );
extern int callsite_src_id_cache_hashkey ( const void *p1 );
extern int mpiPi_query_src ( callsite_stats_t * p );
extern int mpiPi_mergeResults ( void );
extern void mpiPi_publishResults ( void );
extern void mpiPi_collect_basics ( void );
extern void mpiPi_generateReport ( void );
extern void mpiPi_finalize ( void );
extern void mpiPi_update_callsite_stats ( unsigned op, unsigned rank, void **pc, double dur, double sendSize, double ioSize );
extern int find_src_loc ( void *i_addr_hex, char **o_file_str, int *o_lineno, char **o_funct_str );
extern void open_bfd_executable ( char *filename );
extern void close_bfd_executable ( void );
extern double calc_COV ( double* data, int dataSize );
extern int mpiPi_profile_print ( FILE * fp );
extern char * GetBaseAppName ( char *rawName );
extern void mpiPi_RecordTraceBack ( jmp_buf jb, void *pc_array[], int max_back );
extern void mpiPi_getenv ( void );
extern void mpiPi_copy_args ( int *ac, char **av, int av_len );
extern void mpiPi_copy_given_args ( int *ac, char **av, int av_len, int argc, char **argv );

#else /* __STDC__ */

extern int main (/* int argc, char** argv */);
extern void mpiPi_msg (/* char *fmt, ... */);
extern void mpiPi_abort (/* char *fmt, ... */);
extern void mpiPi_msg_debug (/* char *fmt, ... */);
extern void mpiPi_msg_warn (/* char *fmt, ... */);
extern h_t * h_open (/* int size, h_HashFunct hf, h_Comparator hc */);
extern void h_close (/* h_t * ht */);
extern int h_count (/* h_t * ht */);
extern int h_insert (/* h_t * ht, void *ptr */);
extern void * h_search (/* h_t * ht, void *key, void **ptr */);
extern void * h_delete (/* h_t * ht, void *key, void **ptr */);
extern int h_gather_data (/* h_t * ht, int *ac, void ***ptr */);
extern void mpiPi_init (/* char *appName */);
extern int callsite_pc_cache_comparator (/* const void *p1, const void *p2 */);
extern int callsite_pc_cache_hashkey (/* const void *p1 */);
extern int mpiPi_query_pc (/* void *pc, char **filename, char **functname, int *lineno */);
extern int callsite_src_id_cache_comparator (/* const void *p1, const void *p2 */);
extern int callsite_src_id_cache_hashkey (/* const void *p1 */);
extern int mpiPi_query_src (/* callsite_stats_t * p */);
extern int mpiPi_mergeResults (/* void */);
extern void mpiPi_publishResults (/* void */);
extern void mpiPi_collect_basics (/* void */);
extern void mpiPi_generateReport (/* void */);
extern void mpiPi_finalize (/* void */);
extern void mpiPi_update_callsite_stats (/* unsigned op, unsigned rank, void **pc, double dur, double sendSize, double ioSize */);
extern int find_src_loc (/* void *i_addr_hex, char **o_file_str, int *o_lineno, char **o_funct_str */);
extern void open_bfd_executable (/* char *filename */);
extern void close_bfd_executable (/* void */);
extern double calc_COV (/* double* data, int dataSize */);
extern int mpiPi_profile_print (/* FILE * fp */);
extern char * GetBaseAppName (/* char *rawName */);
extern void mpiPi_RecordTraceBack (/* jmp_buf jb, void *pc_array[], int max_back */);
extern void mpiPi_getenv (/* void */);
extern void mpiPi_copy_args (/* int *ac, char **av, int av_len */);
extern void mpiPi_copy_given_args (/* int *ac, char **av, int av_len, int argc, char **argv */);

#endif /* __STDC__ */
#endif /* __CEXTRACT__ */
