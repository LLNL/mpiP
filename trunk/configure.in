dnl Process this file with autoconf to produce a configure script.
dnl $Id$

dnl These two lines disable the cache.
define([AC_CACHE_LOAD], )
define([AC_CACHE_SAVE], )

AC_INIT(mpiP, 3.0, mpip-help@lists.sourceforge.net)
AC_PREREQ(2.13)
AC_CONFIG_HEADER(mpiPconfig.h)
AC_CONFIG_AUX_DIR(bin)

AC_CANONICAL_SYSTEM

CPPFLAGS=
LDFLAGS=
AC_PREFIX_DEFAULT(".")
cross_compiling=yes
echo
echo "  Note: mpiP sets cross_compiling to yes to keep configure from failing in"
echo "        the case where test executables would need to be run as a parallel job."
echo

#
#  With specifications
#

AC_ARG_WITH(cc,
	AC_HELP_STRING([--with-cc], [Gives the name of the C compiler to use.]),
	CC=$withval
)

AC_ARG_WITH(cxx,
	AC_HELP_STRING([--with-cxx], [Gives the name of the C++ compiler to use.]),
	CXX=$withval
)

AC_ARG_WITH(f77,
	AC_HELP_STRING([--with-f77], [Gives the name of the FORTRAN 77 compiler to use.]),
	F77=$withval
)

AC_ARG_WITH(include,
	AC_HELP_STRING([--with-include], [Specifies include directories (-Idir1 -Idir2).]),
	CPPFLAGS=$withval
	echo Using extra include directories: $withval
)

AC_ARG_WITH(ldflags,
	AC_HELP_STRING([--with-ldflags], [Specifies ld flags (-L/usr/local/lib).]),
	LDFLAGS=$withval
	echo Using ld flags: $withval
)
AC_SUBST(LDFLAGS)

AC_SUBST(CFLAGS)
if test -z "${FFLAGS}" ; then
  FFLAGS=${CFLAGS}
fi
AC_SUBST(FFLAGS)

AC_ARG_WITH(libs,
	AC_HELP_STRING([--with-libs], [Specifies libraries (-llib1 -llib2).]),
	LIBS=$withval
	echo Using extra libraries: $withval
)

AC_ARG_WITH(binutils-dir,
	AC_HELP_STRING([--with-binutils-dir], [Base directory of binutils installation.]),
	BINUTILS_DIR=$withval
	LIBS="${LIBS} -L${BINUTILS_DIR}/lib"
	CPPFLAGS="${CPPFLAGS} -I${BINUTILS_DIR}/include"
	echo Using binutils-dir: $withval
	,
	BINUTILS_DIR=unknown
)
AC_SUBST(BINUTILS_DIR)

AC_ARG_WITH(bin-type-flag,
	AC_HELP_STRING([--with-bin-type-flag], [Binary format for AIX ar operations.]),
	BIN_TYPE_FLAG=$withval
	echo Using bin-type-flag: $withval
	,
	BIN_TYPE_FLAG=
)
AC_SUBST(BIN_TYPE_FLAG)

AC_ARG_WITH(gettimeofday,
	AC_HELP_STRING([--with-gettimeofday], [Use gettimeofday for timing.]),
	AC_DEFINE(USE_GETTIMEOFDAY)
	echo Using gettimeofday for timing.
	,
)

AC_ARG_WITH(wtime,
	AC_HELP_STRING([--with-wtime], [Use MPI_Wtime for timing.]),
	AC_DEFINE(USE_WTIME)
	echo Using MPI_Wtime for timing.
	,
)

AC_ARG_WITH(clock_gettime,
	AC_HELP_STRING([--with-clock_gettime], [Use clock_gettime for timing.]),
	AC_DEFINE(USE_CLOCK_GETTIME)
	USE_CLOCK_GETTIME=true
	echo Using clock_gettime for timing.
	,
)

AC_ARG_WITH(rts_get_timebase,
	AC_HELP_STRING([--with-rts_get_timebase], [Use rts_get_timebase for timing on BG/L systems.]),
	AC_DEFINE(USE_RTS_GET_TIMEBASE)
	USE_RTS_GET_TIMEBASE=true
	echo Using rts_get_timebase for timing.
	,
)

#
#  Enable / Disable specifications
#

DEFAULT_TARGS='${C_TARGET} ${FORTRAN_TARGET} ${DEMANGLE_TARGET} API'
ENABLE_API_ONLY=no
AC_ARG_ENABLE(api-only,
	AC_HELP_STRING([--enable-api-only], [Only build the API library.]),
	if test x"$enableval" = xyes ; then
		ENABLE_API_ONLY=yes
		echo Configuring for API library only.
               	AC_DEFINE(ENABLE_API_ONLY)
		DEFAULT_TARGS="API test"
	fi
	,
)

AC_ARG_ENABLE(low-mem-report,
	AC_HELP_STRING([--enable-low-mem-report], [Reduce memory use by only gathering individual process data for each callsite.]),
	if test x"$enableval" = xyes ; then
                AC_DEFINE(LOW_MEM_REPORT)
	fi
	,
)

if test "$ENABLE_API_ONLY" = no ; then

DISABLE_MPI_IO=no
AC_ARG_ENABLE(mpi-io,
	AC_HELP_STRING([--disable-mpi-io], [Disable MPI-I/O reporting.]),
	if test x"$enableval" = xno ; then
		DISABLE_MPI_IO=yes
		echo Profiling of MPI I/O has been disabled.
	fi
	,
)
AC_SUBST(DISABLE_MPI_IO)
fi

ENABLE_BFD=yes
AC_ARG_ENABLE(bfd,
	AC_HELP_STRING([--disable-bfd], [Do not use GNU binutils libbfd for source lookup.]),
	if test x"$enableval" = xno ; then
		echo Use of libbfd has been disabled
		ENABLE_BFD=no
	fi
	,
)

DISABLE_LIBUNWIND=no
AC_ARG_ENABLE(libunwind,
	AC_HELP_STRING([--disable-libunwind], [Do not use libunwind to generate stack traces.]),
	if test x"$enableval" = xno ; then
		DISABLE_LIBUNWIND=yes
		echo Use of libunwind has been disabled
	fi
	,
)

AC_ARG_ENABLE(fortranxlate,
	AC_HELP_STRING([--disable-fortranxlate], [Disable translation of Fortran opaque objects.]),
	if test "$enable_fortranxlate" = "no" ; then
		ENABLE_FORTRAN_XLATE=no
		  echo Translation of FORTRAN opaque objects has been disabled.
	else
		ENABLE_FORTRAN_XLATE=yes
		echo Translation of FORTRAN opaque objects has been enabled.
	fi
	,
	ENABLE_FORTRAN_XLATE=yes
)
AC_SUBST(ENABLE_FORTRAN_XLATE)

AC_ARG_ENABLE(stackdepth,
	AC_HELP_STRING([--enable-stackdepth], [Specify maximum stacktrace depth (default is 8).]),
	STACKDEPTH=$enableval
	echo Maximum stacktrace depth is $STACKDEPTH
	,
	STACKDEPTH=8
)
AC_SUBST(STACKDEPTH)

PC_LOOKUP_FILE=pc_lookup.c
AC_ARG_ENABLE(dwarf,
	AC_HELP_STRING([--enable-dwarf], [Use DWARF library for source lookup.]),
	if test x"$enableval" = xyes ; then
		echo "Using DWARF library for symbol lookup; forcing --disable-bfd"
		ENABLE_BFD=no
		PC_LOOKUP_FILE=pc_lookup_dwarf.c
	fi ;
	USE_LIBDWARF=yes
	,
	USE_LIBDWARF=no
)
AC_SUBST(USE_LIBDWARF)
AC_SUBST(PC_LOOKUP_FILE)

USE_GETARG=false
AC_ARG_ENABLE(getarg,
	AC_HELP_STRING([--enable-getarg], [Use getarg to get fortran command line args.]),
	if test x"$enableval" = xyes ; then
		AC_DEFINE(USE_GETARG)
		echo Use of getarg has been enabled
		USE_GETARG=true
	fi
	,
)
AC_SUBST(USE_GETARG)

AC_ARG_ENABLE(demangling,
	AC_HELP_STRING([--enable-demangling], [Specify GNU, IBM, or Compaq demangling support.]),
	DO_DEMANGLE=$enableval
	echo $DO_DEMANGLE demangling enabled
	,
	DO_DEMANGLE=false
)
AC_SUBST(DO_DEMANGLE)

AC_ARG_ENABLE(check-time,
	AC_HELP_STRING([--enable-check-time], [Enable AIX check for negative time values.]),
	if test x"$enableval" = xyes ; then
		AC_DEFINE(MPIP_CHECK_TIME)
		echo AIX negative time value checking has been enabled
	fi
	,
)


AC_PROG_INSTALL
AC_PROG_RANLIB
TEST_LIST=
if test "$ENABLE_API_ONLY" = no ; then
  AC_CHECK_PROGS(CC, mpcc_r xlc_r mpicc cmpicc gcc cc icc, mpicc)
  AC_CHECK_PROGS(CXX, mpCC_r xlC_r mpiCC mpicxx cmpic++ c++ g++ CC cxx icc, mpiCC)
  AC_CHECK_PROGS(F77, mpxlf_r xlf_r mpif77 cmpifc f77 g77 pgf77 fort ifc, mpif77)
  AC_CHECK_PROGS(LAUNCH, poe srun prun mpirun, mpirun)
else
  AC_CHECK_PROGS(CC, gcc cc icc, mpicc)
  AC_CHECK_PROGS(CXX, c++ g++ CC cxx icc, mpiCC)
  AC_CHECK_PROGS(F77, f77 g77 pgf77 fort ifc, mpif77)
  LAUNCH="\\\"\\\""
  TEST_LIST="api-test.exp"
fi

AC_CHECK_LIB(m,sqrt)

if test "x$ENABLE_BFD" = "xyes" ; then
  AC_CHECK_HEADER(demangle.h, AC_DEFINE(HAVE_DEMANGLE_H))
  AC_CHECK_LIB(intl,dcgettext__)
  AC_CHECK_LIB(iberty,objalloc_create)
  AC_CHECK_HEADER(bfd.h,
  AC_CHECK_LIB(bfd,bfd_openr,,,)
  AC_CHECK_DECL(bfd_get_section_size, AC_DEFINE(HAVE_BFD_GET_SECTION_SIZE), ,#include "bfd.h"
  )
  )
  AC_CHECK_TYPE(bfd_boolean, ,AC_DEFINE(HAVE_BFD_BOOLEAN), [#include "bfd.h"])
  AC_DEFINE(ENABLE_BFD)
else
  if test x$USE_LIBDWARF = xyes ; then
    AC_CHECK_LIB(elf, elf_begin, 
      LIBELF_FOUND=yes, 
      ELFDWARF_ERR="failed to find libelf." ; LIBELF_FOUND=no
      )
    AC_CHECK_LIB(dwarf, dwarf_init, 
      LIBDWARF_FOUND=yes, 
      ELFDWARF_ERR="failed to find libdwarf." ; LIBDWARF_FOUND=no, [-lelf]
      )
    echo $ECHO_N "checking for libelf/libdwarf..." $ECHO_C
    if test x$LIBELF_FOUND = xyes -a x$LIBDWARF_FOUND = xyes ; then
      LIBS="${LIBS} -ldwarf -lelf"
      AC_DEFINE(USE_LIBDWARF)
      echo " found libelf/libdwarf"
    else
      echo " $ELFDWARF_ERR Not using libelf/libdwarf"
    fi
  fi
fi

if test "$ENABLE_API_ONLY" = no ; then
  AC_CHECK_LIB(mpi,MPIR_ToPointer,AC_DEFINE(HAVE_MPIR_TOPOINTER),)
  AC_CHECK_LIB(mpich,MPIR_ToPointer,AC_DEFINE(HAVE_MPIR_TOPOINTER),)
fi

if test "x$USE_CLOCK_GETTIME" = "xtrue"; then
  AC_CHECK_LIB(rt,clock_gettime)
fi

if test "x$DISABLE_LIBUNWIND" = "xno" ; then
	AC_CHECK_HEADER(libunwind.h, AC_DEFINE(HAVE_LIBUNWIND) LIBS="$LIBS -lunwind")
fi

if test "$ENABLE_API_ONLY" = no && test "$DISABLE_MPI_IO" = no ; then
AC_CHECK_FUNC(MPI_File_open,
              AC_DEFINE(HAVE_MPI_IO) HAVE_MPI_IO=mpi.io.protos.txt,
	      AC_CHECK_LIB(mpio,MPI_File_open, 
                AC_DEFINE(HAVE_MPI_IO) HAVE_MPI_IO=mpi.io.protos.txt LIBS="${LIBS} -lmpio",
                AC_MSG_RESULT(MPI I/O symbols not found.  MPI I/O reporting deactivated.)
                HAVE_MPI_IO=/dev/null
                DISABLE_MPI_IO=yes )
)
else
  HAVE_MPI_IO=/dev/null
fi

AC_CHECK_FUNC(mread_real_time, READ_REAL_TIME=mread_real_time, READ_REAL_TIME=read_real_time)
AC_SUBST(READ_REAL_TIME)


if test "$ENABLE_API_ONLY" = no ; then

if test "$ENABLE_FORTRAN_XLATE" = yes ; then
     AC_MSG_CHECKING(fortran to C conversion)
     AC_LINK_IFELSE(
       [ AC_LANG_PROGRAM([[#include "mpi.h"]], 
              [[ MPI_Fint mi; MPI_Request ri; ri = MPI_Request_f2c(mi);]] ) ],
	      [AC_MSG_RESULT([yes])],
              (AC_MSG_RESULT(  functions not found  translation deactivated)
                ENABLE_FORTRAN_XLATE=no) )
fi
fi

#  If using Fortran routines to access command line,
#  test whether get_command_argument is available, otherwise
#  use getarg.
FORTRAN_GETARG=""
FORTRAN_GETARG_SRC_FILE=mpiP_getarg.f.part
if test "$USE_GETARG" = true ; then
     AC_LANG_PUSH(Fortran 77)
     # Force Fortran compiler tests
     AC_LINK_IFELSE(AC_LANG_PROGRAM(,,), , )
     AC_MSG_CHECKING(fortran command-line argument functions)
     AC_LINK_IFELSE(
       [ AC_LANG_PROGRAM(, 
              [[
       integer len
       character*10 val
       call get_command_argument(0, val, len)]] ) ],
	      AC_MSG_RESULT([using get_command_argument]) 
                echo "       call get_command_argument(idx, buf, len)" > $FORTRAN_GETARG_SRC_FILE
                FORTRAN_GETARG=$FORTRAN_GETARG_SRC_FILE,
              AC_MSG_RESULT(using getarg) 
	      echo "       call getarg(idx, buf)" > $FORTRAN_GETARG_SRC_FILE
	      echo "       len = mpipi_get_strlen(buf)" >> $FORTRAN_GETARG_SRC_FILE
	      FORTRAN_GETARG=$FORTRAN_GETARG_SRC_FILE
              AC_SUBST_FILE(FORTRAN_GETARG)
                )
     AC_LANG_POP(Fortran 77)
fi


if test "$ENABLE_API_ONLY" = no ; then
dnl ========== Find out how FORTRAN symbol names appear in C ==========

AC_MSG_CHECKING(fortran symbols)

if test -n "$F77" -a "$F77" != no ; then
  /bin/rm -f ffunc.f flink.c
  echo "      subroutine f_fun()" > ffunc.f
  echo "      return" >> ffunc.f
  echo "      end" >> ffunc.f
  $F77 $FFLAGS -c ffunc.f 1>/dev/null 2>/dev/null
  echo "main(){ FF(); return 0; }" > flink.c
  if $CC -o flink -DFF=f_fun flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(same as C)
    F77_SYMBOLS=symbol
  elif $CC -o flink -DFF=f_fun_ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(lowercase with underscore)
    F77_SYMBOLS=symbol_
  elif $CC -o flink -DFF=f_fun__ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(lowercase with 2 underscores)
    F77_SYMBOLS=symbol__
  elif $CC -o flink -DFF=F_FUN flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(uppercase)
    F77_SYMBOLS=SYMBOL
  elif $CC -o flink -DFF=F_FUN_ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(uppercase with underscore)
    F77_SYMBOLS=SYMBOL_
  elif $CC -o flink -DFF=F_FUN_ flink.c ffunc.o $LDFLAGS $LIBS 1>/dev/null 2>/dev/null; then
    AC_MSG_RESULT(uppercase with 2 underscores)
    F77_SYMBOLS=SYMBOL__
  else
    AC_MSG_RESULT(giving up)
    AC_MSG_ERROR(could not determine F77 symbol names)
  fi
  /bin/rm -f ffunc.f ffunc.o flink flink.c flink.o ffunc
else
  F77_SYMBOLS=symbol_
  AC_MSG_RESULT(guessing lowercase with underscore)
fi
AC_SUBST(F77_SYMBOLS)
AC_DEFINE_UNQUOTED(F77_SYMBOLS,$F77_SYMBOLS)


dnl ========== Identify F77 ==========
FORTRAN_GETARG_OBJ_FILE=get_fortran_arg.o

AC_MSG_CHECKING(fortran compiler)
if $F77 -V 2>&1 | grep -e 'Portland Group' 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=PGI
  MPIPFLIB=mpiPpgf
  FORTRAN_FLAG=-DPGI
  FORTRAN_TARGET=libmpiPpgf.a
elif echo $F77 2>&1 | grep 'xlf' 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=IBM
  if test "x$USE_GETARG" = xtrue ; then
    MPIPFLIB=mpiPxlf
    FORTRAN_TARGET=libmpiPxlf.a
  else
    MPIPFLIB=mpiP
  fi
elif test "x$G77" = xyes ; then
  F77_VENDOR=GNU
  FORTRAN_FLAG=-DGNU_Fortran
  FORTRAN_TARGET=libmpiPg77.a
  MPIPFLIB=mpiPg77
elif $F77 -v 2>&1 | grep -e gcc 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=GNU
  FORTRAN_FLAG=-DGNU_Fortran
  FORTRAN_TARGET=libmpiPg77.a
  MPIPFLIB=mpiPg77
elif $F77 -V 2>&1 | grep -e Intel 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=Intel
  FORTRAN_FLAG=
  FORTRAN_TARGET=
  MPIPFLIB=
elif $F77 -V 2>&1 | grep -e Cray 1>/dev/null 2>/dev/null ; then
  F77_VENDOR=Cray
  FORTRAN_FLAG=-DCray_Fortran
  FORTRAN_TARGET=libmpiPftn.a
  MPIPFLIB=mpiPftn 
  if test "x$USE_GETARG" = xtrue ; then
    FORTRAN_GETARG_OBJ_FILE=get_fortran_arg_pxf.o
  fi
elif $F77 -version 2>&1 | grep -e Compaq 1> /dev/null 2> /dev/null ; then
  F77_VENDOR=Compaq
  MPIPFLIB=mpiP
  FORTRAN_FLAG=
  FORTRAN_TARGET=
else
  F77_VENDOR=Unknown
  MPIPFLIB=mpiP
  FORTRAN_FLAG=
  FORTRAN_TARGET=
fi

if test x"$F77_VENDOR" = x"IBM" ; then
  FORTRAN_STR_DECL="character (buf_len) buf"
else
  FORTRAN_STR_DECL="character buf*(*)"
fi

fi #if test "$ENABLE_API_ONLY" = no ; then

AC_MSG_RESULT($F77_VENDOR)
AC_SUBST(F77_VENDOR,$F77_VENDOR)
AC_SUBST(MPIPFLIB,$MPIPFLIB)
AC_SUBST(FORTRAN_FLAG,$FORTRAN_FLAG)
AC_SUBST(FORTRAN_TARGET,$FORTRAN_TARGET)
AC_SUBST(FORTRAN_STR_DECL, $FORTRAN_STR_DECL)
AC_SUBST(ENABLE_BFD, $ENABLE_BFD)
AC_SUBST(ENABLE_API_ONLY)
AC_SUBST(DEFAULT_TARGS)
AC_SUBST(FORTRAN_GETARG_OBJ_FILE)
AC_SUBST(TEST_LIST)
AC_SUBST_FILE(HAVE_MPI_IO)
AC_SUBST_FILE(FORTRAN_GETARG)

AC_OUTPUT([Defs.mak Makefile testing/Makefile Check.mak mpiPi.h mpi.protos.txt get_fortran_arg.f timers/aix_local.h])

